server:
  # 禁用 Spring 生成404等错误信息，返回到前台
  error:
    whitelabel:
      enabled: false
  port: 8082
  tomcat:
    uri-encoding: UTF-8
  #servlet:
    #context-path: /config
spring:
  # JSON相关配置
  jackson:
    locale: zh_CN
    default-property-inclusion: non-null
    
  # RabbitMQ相关配置（注意：我们这里面配置MQ的原因是Spring Cloud Bus要使用，它的配置刷新就是通过MQ来做的）
  rabbitmq:
    addresses: 192.168.229.132:5672
    username: guest
    password: guest
    virtual-host: /
    
  # Spring Cloud Bus 配置Config自动刷新 （注意：每次我们更新配置之后要请求一下下面配置的接口，配置才会自动刷新）
  cloud:
    bus:
      enabled: true
      refresh:
        enabled: true
    # Config Server相关配置     
    config:
      server:
        git:
          uri: https://github.com/firechiang/springcloud-test-configs.git
          username: firechiang
          password: dsfksdfnksdnfsd # 公共的仓库可以不用用户名和密码
          # basedir: /Users/admin/code/myProjects/java/imooc/SpringCloud_Sell/config/basedir  配置文件下载后所在目录
          
# 配置服务配置文件访问说明（注意：配置文件也要按照如下方式进行命名）
# /{name}-{profiles}.yml  
# /{label}/{name}-{profiles}.yml  

# name=服务名称
# profiles=环境
# label=配置文件所在git分支，不写默认就是master分支（当然不用git也就没有分支一说）  

# 日志级别相关      
logging:
  level:
    com.firecode.elktest.biz.dao: debug
    org.hibernate.SQL: debug
    
# 暴露接口地址相关配置（注：下面的配置是暴露Spring Cloud Config配置自动刷新的接口）   
# 注意：每次我们更新配置之后要请求一下这个接口，配置才会自动刷新。
# 请求地址：curl -v -X POST http://192.168.2.1:8082/actuator/bus-refresh
# 配置自动刷新的原理：请求接口之后，Config Server更新配置，然后利用Spring Cloud Bus发送消息，最后所有服务消费消息，找Config Server更新配置
management:
  endpoints:
    web:
      exposure:
        include:
          bus-refresh
          
          
          
# 开启全局debug日志    
#debug: true